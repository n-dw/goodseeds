<?php
namespace Craft;

class FormBuilder2Service extends BaseApplicationComponent
{
	
	private $_constraints;
	private $_currentVersion;
	private $_filePath;

	/**
	 * Backup All Forms
	 */
	public function backupAllForms()
	{
		$forms = FormBuilder2_FormRecord::model()->ordered()->findAll();
		$table = 'craft_formbuilder2_forms';

		if ($forms) {
			$this->_currentVersion = 'v'.craft()->getVersion().'.'.craft()->getBuild();
			$siteName = IOHelper::cleanFilename(StringHelper::asciiString(craft()->getSiteName()));
			$fileName = ($siteName ? $siteName.'_' : '').gmdate('ymd_His').'_'.$this->_currentVersion.'.sql';
			$this->_filePath = craft()->path->getDbBackupPath().StringHelper::toLowerCase($fileName);

			$this->_processHeader();
			$results = $this->_processResult($table);
			$this->_processConstraints();
			$this->_processFooter();

			$filepath = $this->_filePath;
			$this->_processFile($fileName, $filepath);
		} else {
			return false;
		}
	}

	/**
	 * Process Backup File
	 *
	 * @return null
	 */
	private function _processFile($fileName, $filepath)
	{
		header('Content-Type: application/octet-stream; charset=utf-8');
		header('Content-Disposition: attachment; filename='.$fileName);
		readfile($filepath);
		exit();
	}

	/**
	 * Set sql file header
	 *
	 * @return null
	 */
	private function _processHeader()
	{
		$header = '-- Generated by Craft '.$this->_currentVersion.' on '.DateTimeHelper::nice(DateTimeHelper::currentTimeStamp()).'.'.PHP_EOL.PHP_EOL;
		$header .= '--'.PHP_EOL.'-- Disable foreign key checks and autocommit.'.PHP_EOL.'--'.PHP_EOL.PHP_EOL;
		$header .= 'SET FOREIGN_KEY_CHECKS = 0;'.PHP_EOL;
		$header .= 'SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";'.PHP_EOL;
		$header .= 'SET AUTOCOMMIT = 0;'.PHP_EOL;
		$header .= 'SET NAMES utf8;'.PHP_EOL.PHP_EOL;

		IOHelper::writeToFile($this->_filePath, $header, true, true);
	}

	/**
	 * Set sql file footer
	 *
	 * @return null
	 */
	private function _processFooter()
	{
		IOHelper::writeToFile($this->_filePath, PHP_EOL.'SET FOREIGN_KEY_CHECKS = 1;'.PHP_EOL, true, true);
	}

	/**
	 * Generate the foreign key constraints for all tables.
	 *
	 * @return null
	 */
	private function _processConstraints()
	{
		$sql = '--'.PHP_EOL.'-- Constraints for tables'.PHP_EOL.'--'.PHP_EOL.PHP_EOL;
		$first = true;

		foreach ($this->_constraints as $tableName => $value)
		{
			if ($first && count($value[0]) > 0)
			{
				$sql .= PHP_EOL.'--'.PHP_EOL.'-- Constraints for table '.craft()->db->quoteTableName($tableName).PHP_EOL.'--'.PHP_EOL;
				$sql .= 'ALTER TABLE '.craft()->db->quoteTableName($tableName).PHP_EOL;
			}

			if (count($value[0]) > 0)
			{
				for ($i = 0; $i < count($value[0]); $i++)
				{
					if (mb_strpos($value[0][$i], 'CONSTRAINT') === false)
					{
						$sql .= preg_replace('/(FOREIGN[\s]+KEY)/', "\tADD $1", $value[0][$i]);
					}
					else
					{
						$sql .= preg_replace('/(CONSTRAINT)/', "\tADD $1", $value[0][$i]);
					}

					if ($i == count($value[0]) - 1)
					{
						$sql .= ";".PHP_EOL;
					}
					if ($i < count($value[0]) - 1)
					{
						$sql .=PHP_EOL;
					}
				}
			}
		}

		IOHelper::writeToFile($this->_filePath, $sql, true, true);
	}

	/**
	 * Create the SQL for a table or view dump
	 *
	 * @param $resultName
	 * @param $action
	 *
	 * @return string
	 */
	private function _processResult($resultName, $action = 'create')
	{
		$q = craft()->db->createCommand('SHOW CREATE TABLE '.craft()->db->quoteTableName($resultName).';')->queryRow();

		if (isset($q['Create Table']))
		{
			return $this->_processTable($resultName, $q['Create Table'], $action);
		}
		else if (isset($q['Create View']))
		{
			return $this->_processView($resultName, $q['Create View'], $action);
		}
	}

	/**
	 * @param        $tableName
	 * @param        $createQuery
	 * @param string $action
	 *
	 * @return string
	 */
	private function _processTable($tableName, $createQuery, $action = 'create')
	{
		$result = PHP_EOL.'DROP TABLE IF EXISTS '.craft()->db->quoteTableName($tableName).';'.PHP_EOL.PHP_EOL;

		if ($action == 'create')
		{
			$result .= PHP_EOL . '--' . PHP_EOL . '-- Schema for table `' . $tableName . '`' . PHP_EOL . '--' . PHP_EOL;

			$pattern = '/CONSTRAINT.*|FOREIGN[\s]+KEY/';

			// constraints to $tableName
			preg_match_all($pattern, $createQuery, $this->_constraints[$tableName]);

			$createQuery = preg_split('/$\R?^/m', $createQuery);
			$createQuery = preg_replace($pattern, '', $createQuery);

			$removed = false;

			foreach ($createQuery as $key => $statement)
			{
				// Stupid PHP.
				$temp = trim($createQuery[$key]);

				if (empty($temp))
				{
					unset($createQuery[$key]);
					$removed = true;
				}
			}

			if ($removed)
			{
				$createQuery[count($createQuery) - 2] = rtrim($createQuery[count($createQuery) - 2], ',');
			}

			// resort the keys
			$createQuery = array_values($createQuery);

			for ($i = 0; $i < count($createQuery) - 1; $i++)
			{
				$result .= $createQuery[$i] . PHP_EOL;
			}

			$result .= $createQuery[$i] . ';' . PHP_EOL;

			// Write out what we have so far.
			IOHelper::writeToFile($this->_filePath, $result, true, true);

			// See if we have any data.
			$totalRows = craft()->db->createCommand('SELECT count(*) FROM ' . craft()->db->quoteTableName($tableName) . ';')->queryScalar();

			if ($totalRows == 0)
			{
				return;
			}

			// Data!
			IOHelper::writeToFile($this->_filePath, PHP_EOL . '--' . PHP_EOL . '-- Data for table `' . $tableName . '`' . PHP_EOL . '--' . PHP_EOL . PHP_EOL, true, true);

			$batchSize = 1000;

			// Going to grab the data in batches.
			$totalBatches = ceil($totalRows / $batchSize);

			for ($counter = 0; $counter < $totalBatches; $counter++)
			{
				@set_time_limit(240);

				$offset = $batchSize * $counter;
				$rows = craft()->db->createCommand('SELECT * FROM ' . craft()->db->quoteTableName($tableName) . ' LIMIT ' . $offset . ',' . $batchSize . ';')->queryAll();

				if (!empty($rows))
				{
					$attrs = array_map(array(craft()->db, 'quoteColumnName'), array_keys($rows[0]));

					foreach ($rows as $row)
					{
						$insertStatement = 'INSERT INTO ' . craft()->db->quoteTableName($tableName) . ' (' . implode(', ', $attrs) . ') VALUES';

						// Process row
						foreach ($row as $columnName => $value)
						{
							if ($value === null)
							{
								$row[$columnName] = 'NULL';
							}
							else
							{
								$row[$columnName] = craft()->db->getPdoInstance()->quote($value);
							}
						}

						$insertStatement .= ' ('.implode(', ', $row).');';
						IOHelper::writeToFile($this->_filePath, $insertStatement . PHP_EOL, true, true);
					}
				}
			}

			IOHelper::writeToFile($this->_filePath, PHP_EOL . PHP_EOL, true, true);
		}

		return $result;
	}

}
